{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-8b90f0369ee3c92b7df87fa75617bcf3",
            "file": "src/app/store/app.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { booksReducer } from \"../books/state/books.reducer\";\r\nimport { BooksState } from \"../books/state/books.state\";\r\nimport { counterReducer } from \"../counter/state/counter.reducer\";\r\nimport { CounterState } from \"../counter/state/counter.state\";\r\nimport { UserReducer } from \"../newuser/state/newuser.reducer\";\r\n\r\nexport interface AppState{\r\n    counter: CounterState;\r\n    books: BooksState\r\n}\r\n\r\n\r\nexport const appReducer = {\r\n    counter: counterReducer,\r\n    books: booksReducer,\r\n    user: UserReducer\r\n}",
            "properties": [
                {
                    "name": "books",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BooksState",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "counter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CounterState",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Books",
            "id": "interface-Books-9df341f52e1b0850f541028539fecf1d",
            "file": "src/app/shared/header/models/books.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Books{\r\n    id?: string,\r\n    title: string,\r\n    isbn:string,\r\n    price: string,\r\n    description: string\r\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isbn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "BooksState",
            "id": "interface-BooksState-30ac4e2e6f63eb180e5ef191fb8446f9",
            "file": "src/app/books/state/books.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Books } from \"src/app/shared/header/models/books.model\";\r\n\r\nexport interface BooksState {\r\n    books : Books[];\r\n}\r\n\r\n\r\nexport const initialState: BooksState = {\r\n    books: [],\r\n}",
            "properties": [
                {
                    "name": "books",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Books[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CounterState",
            "id": "interface-CounterState-7797beb3509378cad512ae27697c179d",
            "file": "src/app/counter/state/counter.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CounterState{\r\n    counter : number;\r\n    channelName: string\r\n}\r\n\r\nexport const initialState: CounterState = {\r\n    counter: 4,\r\n    channelName:'Test Channel'\r\n}",
            "properties": [
                {
                    "name": "channelName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "counter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UserRegister",
            "id": "interface-UserRegister-9899f85dd1e64aca61fc9a3fcb6aadbe",
            "file": "src/app/shared/header/models/register.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserRegister{\r\n    fName: string,\r\n    lName: string,\r\n    email: string,\r\n    password: string,\r\n    userType: string\r\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "fName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UserState",
            "id": "interface-UserState-21a9314cf2af30fa4f812812853777c2",
            "file": "src/app/newuser/state/newuser.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UserRegister } from \"src/app/shared/header/models/register.model\";\r\n\r\n\r\nexport interface UserState {\r\n    user : UserRegister[];\r\n}\r\n\r\n\r\nexport const initialState: UserState = {\r\n    user: [],\r\n}",
            "properties": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRegister[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BooksEffects",
            "id": "injectable-BooksEffects-c66f0e77935a0a5e21d3646e4492cbad",
            "file": "src/app/books/state/books.effects.ts",
            "properties": [
                {
                    "name": "addBooks$",
                    "defaultValue": "createEffect(()=>{\r\n      return  this.action$.pipe(ofType(addbooks), \r\n        mergeMap(action=>{\r\n            return this.booksService.addBooks(action.book).pipe(\r\n                map(data=>{\r\n                    const book = {...action.book, id: data.name};\r\n                    return addBooksSuccess({book});\r\n                })\r\n            )\r\n        }))\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "deletePost$",
                    "defaultValue": "createEffect(()=>{\r\n        return this.action$.pipe(\r\n            ofType(deleteBook),\r\n            switchMap((action)=>{\r\n                return this.booksService.deleteBook(action.id).pipe(\r\n                    map((data)=>{\r\n                        return deleteBookSucces({ id: action.id});\r\n                    })\r\n                )\r\n            })\r\n        )\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "loadBooks$",
                    "defaultValue": "createEffect(()=>{\r\n        return this.action$.pipe(\r\n            ofType(loadBooks),\r\n            mergeMap((action)=>{\r\n                return this.booksService.getBooks().pipe(\r\n                    map((books)=>{\r\n                        return loadBookSuccess({books});\r\n                    })\r\n                )\r\n            })\r\n        )\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "updateBook$",
                    "defaultValue": "createEffect(()=>{\r\n        return this.action$.pipe(\r\n            ofType(updateBook),\r\n            switchMap((action)=>{\r\n                return this.booksService.updatePost(action.book).pipe(\r\n                    map((data)=>{\r\n                        return updateBookSuccess({ book: action.book})\r\n                    })\r\n                )\r\n            })\r\n        )\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { addbooks, addBooksSuccess, deleteBook, deleteBookSucces, loadBooks, loadBookSuccess, updateBook, updateBookSuccess } from \"src/app/books/state/books.actions\";\r\nimport { BooksService } from \"src/app/services/books.service\";\r\nimport { map, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class BooksEffects{\r\n\r\n    constructor(private action$:Actions, private booksService: BooksService){\r\n    }\r\n\r\n    loadBooks$ = createEffect(()=>{\r\n        return this.action$.pipe(\r\n            ofType(loadBooks),\r\n            mergeMap((action)=>{\r\n                return this.booksService.getBooks().pipe(\r\n                    map((books)=>{\r\n                        return loadBookSuccess({books});\r\n                    })\r\n                )\r\n            })\r\n        )\r\n    })\r\n\r\n    addBooks$ = createEffect(()=>{\r\n      return  this.action$.pipe(ofType(addbooks), \r\n        mergeMap(action=>{\r\n            return this.booksService.addBooks(action.book).pipe(\r\n                map(data=>{\r\n                    const book = {...action.book, id: data.name};\r\n                    return addBooksSuccess({book});\r\n                })\r\n            )\r\n        }))\r\n    })\r\n\r\n    updateBook$ = createEffect(()=>{\r\n        return this.action$.pipe(\r\n            ofType(updateBook),\r\n            switchMap((action)=>{\r\n                return this.booksService.updatePost(action.book).pipe(\r\n                    map((data)=>{\r\n                        return updateBookSuccess({ book: action.book})\r\n                    })\r\n                )\r\n            })\r\n        )\r\n    })\r\n\r\n    deletePost$ = createEffect(()=>{\r\n        return this.action$.pipe(\r\n            ofType(deleteBook),\r\n            switchMap((action)=>{\r\n                return this.booksService.deleteBook(action.id).pipe(\r\n                    map((data)=>{\r\n                        return deleteBookSucces({ id: action.id});\r\n                    })\r\n                )\r\n            })\r\n        )\r\n    })\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BooksService",
            "id": "injectable-BooksService-73c3b7c98749865119669dda3dba70b0",
            "file": "src/app/services/books.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addBooks",
                    "args": [
                        {
                            "name": "book",
                            "type": "Books",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Books",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Books[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePost",
                    "args": [
                        {
                            "name": "book",
                            "type": "Books",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Books",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Books } from '../shared/header/models/books.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BooksService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getBooks(): Observable<Books[]>{\r\n    return this.http.get<Books[]>(`http://localhost:3000/books`)\r\n    .pipe(map((data)=>{\r\n      const books: Books[] = [];\r\n     for(let key in data){\r\n       books.push({...data[key], id: key})\r\n     }\r\n      return books;\r\n    }));\r\n  }\r\n\r\n  addBooks(book : Books): Observable<{ name: string}>{\r\n    return this.http.post<{name : string}>(`http://localhost:3000/books`,book)\r\n  }\r\n\r\n  updatePost(book: Books){\r\n    \r\n    // const bookData = {\r\n    //   [book.id]: { title: book.title, description: book.description },\r\n    // };\r\n    return this.http.patch(`http://localhost:3000/books`,book)\r\n  }\r\n\r\n  deleteBook(id : string){\r\n    return this.http.delete(`http://localhost:3000/books/${id}.json`)\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-8723e9486b74423d99c82b658ddb82b3",
            "file": "src/app/dialog-module/dialog.service.ts",
            "properties": [
                {
                    "name": "dialogComponentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<DialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "appendDialogComponentToBody",
                    "args": [
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DialogRef",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DialogRef",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDialogComponentFromBody",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Injectable,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  EmbeddedViewRef,\n  ComponentRef,\n  Type\n} from '@angular/core';\nimport { DialogModule } from './dialog-module.module';\n// import { DialogComponent } from './dialog.component';\nimport { DialogConfig } from './dialog-config';\nimport { DialogInjector } from './dialog-injector';\nimport { DialogRef } from './dialog-ref';\nimport { DialogComponent } from './dialog/dialog.component';\n\n@Injectable({\n  providedIn: DialogModule\n})\nexport class DialogService {\n  dialogComponentRef: ComponentRef<DialogComponent>;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private injector: Injector\n  ) {}\n\n  public open(componentType: Type<any>, config: DialogConfig): DialogRef {\n    const dialogRef = this.appendDialogComponentToBody(config);\n\n    this.dialogComponentRef.instance.childComponentType = componentType;\n\n    return dialogRef;\n  }\n\n  private appendDialogComponentToBody(config: DialogConfig): DialogRef {\n    const map = new WeakMap();\n    map.set(DialogConfig, config);\n\n    const dialogRef = new DialogRef();\n    map.set(DialogRef, dialogRef);\n\n    const sub = dialogRef.afterClosed.subscribe(() => {\n      // close the dialog\n      this.removeDialogComponentFromBody();\n      sub.unsubscribe();\n    });\n\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(DialogComponent);\n    const componentRef = componentFactory.create(new DialogInjector(this.injector, map));\n    this.appRef.attachView(componentRef.hostView);\n\n    const domElem = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    document.body.appendChild(domElem);\n\n    this.dialogComponentRef = componentRef;\n\n    this.dialogComponentRef.instance.onClose.subscribe(() => {\n      this.removeDialogComponentFromBody();\n    });\n    \n    return dialogRef;\n  }\n\n  private removeDialogComponentFromBody(): void {\n    this.appRef.detachView(this.dialogComponentRef.hostView);\n    this.dialogComponentRef.destroy();\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-a8a7b40c040a6a15c606031c0ec8ec41",
            "file": "src/app/services/login.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(email: string, password: string) {\r\n\r\n    return this.http.get(`http://localhost:3000/register`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NewUserEffects",
            "id": "injectable-NewUserEffects-286c7274b54d5405b33f355ec1db5972",
            "file": "src/app/newuser/state/newuser.effects.ts",
            "properties": [
                {
                    "name": "addUser$",
                    "defaultValue": "createEffect(()=>{\r\n      return  this.action$.pipe(ofType(addUser), \r\n        mergeMap(action=>{\r\n            return this.userService.addUser(action.user).pipe(\r\n                map(data=>{\r\n                    const user = {...action.user, id: data.name};\r\n                    return addUserSuccess({user});\r\n                })\r\n            )\r\n        }))\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { map, mergeMap} from 'rxjs/operators';\r\nimport { RegisterUserService } from \"src/app/services/register-user.service\";\r\nimport { addUser, addUserSuccess } from \"./newuser.actions\";\r\n\r\n@Injectable()\r\nexport class NewUserEffects{\r\n\r\n    constructor(private action$:Actions, private userService: RegisterUserService){\r\n    }\r\n    \r\n    addUser$ = createEffect(()=>{\r\n      return  this.action$.pipe(ofType(addUser), \r\n        mergeMap(action=>{\r\n            return this.userService.addUser(action.user).pipe(\r\n                map(data=>{\r\n                    const user = {...action.user, id: data.name};\r\n                    return addUserSuccess({user});\r\n                })\r\n            )\r\n        }))\r\n    })\r\n\r\n   \r\n\r\n    \r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "RegisterUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "RegisterUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RegisterUserService",
            "id": "injectable-RegisterUserService-d5f82a139fcfe7b3ae9c91d7d9c94fa5",
            "file": "src/app/services/register-user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserRegister",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserRegister",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { UserRegister } from '../shared/header/models/register.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterUserService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addUser(user: UserRegister): Observable<{ name: string}>{\r\n    return this.http.post<{name : string}>(`http://localhost:3000/register`,user)\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "DialogConfig",
            "id": "class-DialogConfig-05966445135e0d5d173cbe524cabc874",
            "file": "src/app/dialog-module/dialog-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DialogConfig<D = any> {\r\n    data?: D;\r\n  }",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "D",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DialogInjector",
            "id": "class-DialogInjector-52fa54603aa3613273774bfc3a9f51f3",
            "file": "src/app/dialog-module/dialog-injector.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\r\n\r\nexport class DialogInjector implements Injector {\r\n  constructor(private _parentInjector: Injector, private _additionalTokens: WeakMap<any, any>) {}\r\n\r\n  get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\r\n//   get(token: any, notFoundValue?: any);\r\n  get(token: any, notFoundValue?: any, flags?: any) {\r\n    const value = this._additionalTokens.get(token);\r\n\r\n    if (value) return value;\r\n\r\n    return this._parentInjector.get<any>(token, notFoundValue);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_additionalTokens",
                        "type": "WeakMap<any | any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "_parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_additionalTokens",
                        "type": "WeakMap<any | any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "token",
                            "type": "Type<T> | InjectionToken<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "notFoundValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "flags",
                            "type": "InjectFlags",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "Type<T> | InjectionToken<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "notFoundValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "InjectFlags",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "token",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "notFoundValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "flags",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "notFoundValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Injector"
            ]
        },
        {
            "name": "DialogRef",
            "id": "class-DialogRef-aabb4a575222c7194f8d1a4bbf048534",
            "file": "src/app/dialog-module/dialog-ref.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable, Subject } from 'rxjs';\r\n\r\nexport class DialogRef {\r\n  close(result?: any): void {\r\n    this._afterClosed.next(result);\r\n  }\r\n\r\n  private readonly _afterClosed = new Subject<any>();\r\n  \r\n  afterClosed: Observable<any> = this._afterClosed.asObservable();\r\n}",
            "properties": [
                {
                    "name": "_afterClosed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "afterClosed",
                    "defaultValue": "this._afterClosed.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "InsertionDirective",
            "id": "directive-InsertionDirective-f17fd53923b153d2e470dd1f7bcb2be5",
            "file": "src/app/dialog-module/insertion.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appInsertion]'\r\n})\r\nexport class InsertionDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) {}\r\n}",
            "selector": "[appInsertion]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AboutusComponent",
            "id": "component-AboutusComponent-8f7b8a8dc3765e251c6a45049b09d194",
            "file": "src/app/shared/aboutus/aboutus.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutus",
            "styleUrls": [
                "./aboutus.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aboutus.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-aboutus',\n  templateUrl: './aboutus.component.html',\n  styleUrls: ['./aboutus.component.scss']\n})\nexport class AboutusComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n    font-family: 'Times New Roman', Times, serif;\r\n    height: 70vh;\r\n    margin-left: 20px;\r\n}",
                    "styleUrl": "./aboutus.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <div class=\"heading\">\n        <h3>About us</h3>\n    </div>\n    <div class=\"quate\">\n        <h4>\"To learn to read is to light a fire; every syllable that is spelled out is a spark.\"– Victor Hugo.\n        </h4>\n    </div>\n    <div class=\"deatiled\">\n        <p>They say- If you have to enlarge someone's world, make them live 1000 lives, enlighten even the dullest of minds… hand them a book.</p>\n        <p>Book HOus is committed to the same- spreading joy of reading and learning.</p>\n    </div>\n    <div class=\"detailed\">\n        <p>So what are you waiting for, reader?</p>\n        <p>Start exploring, reading and buying now!</p>\n    </div>\n</div>"
        },
        {
            "name": "AddbooksComponent",
            "id": "component-AddbooksComponent-b9555ed1820bcfdcac7b26f1fbdeaf5f",
            "file": "src/app/books/addbooks/addbooks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-addbooks",
            "styleUrls": [
                "./addbooks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./addbooks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "booksForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddbooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { Books } from 'src/app/shared/header/models/books.model';\r\nimport { AppState } from 'src/app/store/app.state';\r\nimport { addbooks } from '../state/books.actions';\r\n\r\n\r\n@Component({\r\n  selector: 'app-addbooks',\r\n  templateUrl: './addbooks.component.html',\r\n  styleUrls: ['./addbooks.component.scss']\r\n})\r\nexport class AddbooksComponent implements OnInit {\r\n\r\n  booksForm: FormGroup;\r\n  constructor(private store: Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.booksForm = new FormGroup({\r\n      title: new FormControl(null,\r\n        [Validators.required ]),\r\n\r\n      description: new FormControl(null,[Validators.required]),\r\n      isbn: new FormControl(null,\r\n        [Validators.required ]),\r\n      price: new FormControl(null,\r\n          [Validators.required ]),\r\n    })\r\n  }\r\n\r\n  onAddbooks(){\r\n    if(!this.booksForm.valid){\r\n      return;\r\n    }\r\n    const book : Books ={\r\n      title: this.booksForm.value.title,\r\n      description: this.booksForm.value.description,\r\n      isbn: this.booksForm.value.isbn,\r\n      price: this.booksForm.value.price\r\n    };\r\n\r\n   this.store.dispatch(addbooks({book}))\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n.main{\r\n    background-image: url(\"../../../assets/bg.jpg\");\r\n    min-height: 73.2vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n.container{\r\n    width: 400px;\r\n    padding: 10px 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    position: relative;\r\n    border: 1px solid black;\r\n    background: var(--background);\r\n    border-radius: 2px;\r\n    padding: 7px 0px 7px 0px;\r\n\r\n    .mandetory{\r\n        color: red;\r\n    }\r\n    input{\r\n        border-radius: 2px solid black;\r\n        padding: 5px 0px 5px 3px;\r\n        margin: 5px 0px 5px 0px;\r\n        \r\n    }\r\n    \r\n    ::placeholder {\r\n        color: rgb(141, 133, 133);\r\n    }\r\n    label{\r\n       color: black;\r\n    }\r\n    \r\n   \r\n    .personalInfo{\r\n        display: flex;\r\n        margin: 10px 0px 10px 0px;\r\n        flex-direction: row;\r\n        .fname{\r\n            margin-right: 3px;\r\n        }    \r\n        \r\n    }\r\n\r\n    .otherinfo{\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-bottom: 6px;\r\n        input{\r\n            min-width: 250px;\r\n        }\r\n        #userType{\r\n            padding: 5px 0px 5px 3px;\r\n            margin: 5px 0px 5px 0px;\r\n            min-width: 254px;\r\n        }\r\n        div{\r\n            padding: 4px 0px 4px 0px;\r\n        }\r\n        .submit{\r\n           display: flex;\r\n           \r\n           button{\r\n            margin-top: 5px;\r\n            background-color: #00000099;\r\n            color: white;\r\n            padding: 8px 8px 8px 8px;\r\n            border-radius: 3px;\r\n            cursor: pointer;\r\n            width: 70px;\r\n           }\r\n\r\n           .backtologin{\r\n              position: relative;\r\n              left: 5px;\r\n              cursor: pointer;\r\n           }\r\n        }\r\n        .descrption{\r\n            width: 250px;\r\n        }\r\n     \r\n    }\r\n   \r\n}\r\n}\r\n\r\n",
                    "styleUrl": "./addbooks.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main\">\r\n    <form  [formGroup]=\"booksForm\" (ngSubmit)=\"onAddbooks()\">\r\n    <div class=\"container\">  \r\n        <div class=\"otherinfo\">\r\n            <div class=\"fname\">\r\n                <label for=\"fname\">Book Title</label> <br>\r\n                <input type=\"text\" id=\"fname\" placeholder=\"book title\" formControlName=\"title\">\r\n                <div *ngIf=\"booksForm.controls['title'].errors && booksForm.controls['title'].touched\"\r\n                class=\"error-msg\">\r\n                <div class=\"error\" [hidden]=\"!booksForm.controls['title'].errors.required\">please enter book title</div>\r\n                <div class=\"error\" [hidden]=\"!booksForm.controls['title'].errors.minLength\">please enter minimum 6 char</div>\r\n                </div> \r\n            </div>\r\n            <div class=\"lname\">\r\n                <label for=\"lname\">ISBN Number</label> <span class=\"mandetory\">*</span><br>\r\n                <input type=\"text\" placeholder=\"Last name\" id=\"lname\" formControlName=\"isbn\">\r\n            </div>\r\n            <div class=\"workemail\">\r\n                <label for=\"workemail\">Price <span class=\"mandetory\">*</span></label> <br>\r\n                <input type=\"text\" placeholder=\"enter book price\" formControlName=\"price\">\r\n            </div>\r\n            <div class=\"password\">\r\n                <label for=\"lname\">Description</label> <span class=\"mandetory\">*</span><br>\r\n                <textarea rows=\"4\" class=\"descrption\" cols=\"30\" placeholder=\"book description here\" formControlName=\"description\"></textarea>\r\n                <div *ngIf=\"booksForm.controls['description'].errors && booksForm.controls['description'].touched\"\r\n                    class=\"error-msg\">\r\n                    <div class=\"error\" [hidden]=\"!booksForm.controls['description'].errors.required\">please enter book Description</div>\r\n                </div> \r\n            </div> \r\n            <div class=\"submit\">\r\n                <div class=\"submitbtn\" type=\"submit\"><button>Add</button></div>\r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n</form>\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6275027b66ce33e6efbd8bcffab0bcd0",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'training'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  \r\n  title= 'training';\r\n  constructor(private ref: ElementRef) {}\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.container{\r\n    width: auto;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n  }\r\n  .header{\r\n    flex-shrink: 0;\r\n    flex-grow: 0;\r\n  }\r\n  .content{\r\n    flex-shrink: 1;\r\n    flex-grow: 1;\r\n    position: relative;\r\n    overflow-y: auto;\r\n  }\r\n  .navbar{\r\n    width: 100%;\r\n    background: #212121;\r\n    color: white;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    font-family: 'Times New Roman', Times, serif;\r\n    font-size: 19px;\r\n    margin-left: 0px;\r\n    .logoimg{\r\n      position: relative;\r\n      left: 20px;\r\n    }\r\n    .nav-list{\r\n      list-style-type: none;\r\n      .list-item{\r\n        display: inline-block;\r\n        padding: 0px 7px;\r\n      }     \r\n    }\r\n    \r\n    .logo{\r\n      height: 36px;\r\n      \r\n    }\r\n\r\n    .menu{\r\n      display: none;\r\n    }\r\n    .menu-line{\r\n      width: 20px;\r\n      height: 3px;\r\n      background-color: white;\r\n      margin-bottom: 4px;\r\n    }\r\n    @media all and (max-width: 480px){\r\n      .navbar{\r\n        flex-direction: column;\r\n        \r\n      }\r\n      .menu{\r\n        display: block;\r\n        position: absolute;\r\n        right: 10px;\r\n        top: 10px;\r\n      }    \r\n    }\r\n  }\r\n  \r\n\r\n  @media all and (max-width: 480px){\r\n    .navbar{\r\n      flex-direction: column;\r\n      .list-item{\r\n        list-style-type: none;\r\n        width: 100%;\r\n        text-align: center;\r\n        padding-top: 10px;\r\n       \r\n      }\r\n    }\r\n  } \r\n\r\n\r\nmain{\r\n  height: auto;\r\n  footer{ \r\n    background: #212121;\r\n    .container1{\r\n      \r\n      width: 100%;\r\n      max-width: 1100px;\r\n      margin: 0 auto;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content:space-evenly;\r\n      flex-wrap: wrap;\r\n      font-family: 'Times New Roman', Times, serif;\r\n      .ftr{\r\n        h3{\r\n          font-size: 18px;\r\n          color: #fff;\r\n          margin-bottom: -12px;\r\n        }\r\n        .company{\r\n          position: relative;\r\n          left:30px\r\n        }\r\n        .policies{\r\n          position: relative;\r\n          left:40px\r\n        }\r\n        .help{\r\n          position: relative;\r\n          left:40px\r\n        }\r\n        flex-basis: 18%;\r\n      }\r\n      .fcontent{\r\n        list-style: none;\r\n        a{\r\n          text-decoration: none;\r\n          color: #fff;\r\n          opacity: .6;\r\n          font-size: 15px;\r\n        }\r\n      }\r\n\r\n    }\r\n    @media all and (max-width: 480px){\r\n      .container1{\r\n        flex-direction: column;\r\n      }\r\n    } \r\n  }\r\n}\r\n\r\n\r\n    \r\n// end f css\r\n  nav a {\r\n    padding: 0px 10px;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  nav a:visited, a:link {\r\n    color: #f8f8f8;\r\n  }\r\n  nav a:hover {\r\n    color: #039be5;\r\n    background-color: #CFD8DC;\r\n  }\r\n  nav a.active {\r\n    color: #039be5;\r\n  }\r\n  \r\n  ",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <div class=\"header\">\r\n    <nav class=\"navbar\">\r\n      <div class=\"logoimg\">\r\n        <a href=\"\">\r\n          <img src=\"../app/../assets/logo0.PNG\" alt=\"\"   class=\"logo\">\r\n        </a>\r\n      </div>\r\n      <ul class=\"nav-list\" >\r\n        <li class=\"list-item\">\r\n          <a routerLink=\"/home\" routerLinkActive=\"active\">Home</a>\r\n        </li>\r\n        <li class=\"list-item\"> \r\n          <a routerLink=\"/books\" routerLinkActive=\"active\">Books</a>\r\n        </li>\r\n        <li class=\"list-item\">\r\n          <a routerLink=\"/books/addbooks\" routerLinkActive=\"active\">Add Books</a>\r\n        </li>\r\n        <li class=\"list-item\">\r\n          <a routerLink=\"/newuser\" routerLinkActive=\"active\">Register</a>\r\n        </li>\r\n        <li class=\"list-item\">\r\n          <a routerLink=\"aboutus\" routerLinkActive=\"active\">About us</a>\r\n        </li>\r\n        <li class=\"list-item\">\r\n          <a routerLink=\"/auth\" routerLinkActive=\"active\">Login</a>\r\n        </li>\r\n      </ul>\r\n      <div class=\"menu\">\r\n        <div class=\"menu-line\"></div>\r\n        <div class=\"menu-line\"></div>\r\n        <div class=\"menu-line\"></div>\r\n      </div>\r\n    </nav>\r\n    \r\n    <div class=\"content\">\r\n        <router-outlet></router-outlet>\r\n        <div class=\"push\"></div>\r\n      </div>\r\n      <main>\r\n        <footer>\r\n          <div class=\"container1\">\r\n            <div class=\"ftr\">\r\n              <h3  class=\"company\">Company</h3>\r\n              <ul class=\"fcontent\">              \r\n                <li><a href=\"\">About Us</a></li>\r\n                <li><a href=\"\">Contact Us</a></li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"ftr\">  \r\n              <h3 class=\"policies\">Policies</h3>\r\n              <ul class=\"fcontent\">              \r\n                <li><a href=\"\">Privacy Policy</a></li>\r\n                <li><a href=\"\">Copyright policy</a></li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"ftr\">  \r\n              <h3 class=\"help\">Help</h3>\r\n              <ul class=\"fcontent\">              \r\n                <li><a href=\"\">Shiping</a></li>\r\n                <li><a href=\"\">Contact us</a></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </footer>\r\n      </main>\r\n  </div>\r\n  \r\n  "
        },
        {
            "name": "BooksComponent",
            "id": "component-BooksComponent-bda9f324533125df85d5299d939b8b15",
            "file": "src/app/books/books/books.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-books",
            "styleUrls": [
                "./books.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./books.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Books",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Books[]>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "edit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "editBook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogService } from 'src/app/dialog-module/dialog.service';\r\nimport { Books } from 'src/app/shared/header/models/books.model';\r\nimport { AppState } from 'src/app/store/app.state';\r\nimport { EditbookComponent } from '../editbook/editbook.component';\r\nimport { deleteBook, loadBooks} from '../state/books.actions';\r\nimport { getBooks } from '../state/books.selector';\r\n\r\n@Component({\r\n  selector: 'app-books',\r\n  templateUrl: './books.component.html',\r\n  styleUrls: ['./books.component.scss']\r\n})\r\nexport class BooksComponent implements OnInit {\r\n\r\n  edit: boolean = false;\r\n  Books: Observable<Books[]>;\r\n  constructor(private store: Store<AppState>,public dialog: DialogService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.Books = this.store.select(getBooks);\r\n    this.store.dispatch(loadBooks());\r\n  }\r\n\r\n  editBook(){\r\n    // this.openDialog(null);\r\n  }\r\n  onDeleteBook(id: any){\r\n    if(confirm('Are you sure you want to delete')){\r\n      this.store.dispatch(deleteBook({ id }));\r\n      console.log(\"delete the post \");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  openDialog() {\r\n    const ref = this.dialog.open(EditbookComponent, {\r\n      data: { message: 'I am a dynamic component inside of a dialog!' }\r\n    });\r\n\r\n    // ref.afterClosed.subscribe((result: any) => {\r\n    //   console.log('Dialog closed', result);\r\n    // });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".heading{\r\n        display: flex;\r\n        align-items: flex-start;\r\n        margin-left: 20px;\r\n        h2{\r\n          color: black !important;\r\n          font-size: 24px;\r\n        }\r\n        font-family: 'Times New Roman', Times, serif;\r\n        \r\n}\r\n\r\n  h2 {\r\n    font-size: 1rem;\r\n    color: #007489;\r\n  }\r\n  \r\n  p {\r\n    margin-bottom: 1.5em;\r\n    color: #898989;\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  img {\r\n    display: block;\r\n    border: 0;\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n  \r\n  \r\n  .card {\r\n    background: white;\r\n    margin-bottom: 2em;\t\r\n    border: 1px solid black;\r\n    border-radius: 2px;\r\n    a {\r\n      color: black;\r\n      \r\n      text-decoration: none;\r\n    }\r\n    a:hover {\r\n      box-shadow: 3px 3px 8px hsl(0, 0%, 80%);\r\n    }\r\n  }\r\n  \r\n  \r\n  .card-content {\r\n    font-family: 'Times New Roman', Times, serif;\r\n    padding: 1.4em;\r\n    h2 {\r\n      margin-top: 0;\r\n      margin-bottom: .5em;\r\n      font-weight: bold;\r\n    }\r\n    p {\r\n      font-size: 80%;\r\n    }\r\n    button{\r\n      color: white;\r\n      background-color: #00000099;\r\n      margin-left: 2px;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n  \r\n  .cards {\r\n     display: flex;\r\n     flex-wrap: wrap;\r\n     justify-content: space-between;\r\n     margin: 0px 4px 0px 4px;\r\n     \r\n  }\r\n  \r\n  .card {\r\n    flex: 0 1 24%;\r\n  }\r\n  ",
                    "styleUrl": "./books.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"heading\">\r\n    <h2>Book's Data</h2>\r\n</div>\r\n\r\n  <main class=\"main-area\">    \r\n    <div class=\"centered\" >\r\n        <section class=\"cards\" >\r\n            <article class=\"card\" *ngFor=\"let book of Books | async\">\r\n                <a>\r\n                    <div class=\"card-content\">\r\n                        <h2>Name: {{book.title}}</h2>\r\n                        <p>price:{{book.price}}</p>\r\n                        <p>ISBN: {{book.isbn}}</p>\r\n                        <p>Description: {{book.description}}</p>\r\n                        <button (click)=\"openDialog()\">edit</button>\r\n                        <button>delete</button>\r\n                    </div>\r\n                </a>\r\n            </article>       \r\n        </section>     \r\n    </div>\r\n</main>\r\n\r\n<div *ngIf=\"edit\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "buttonComponent",
            "id": "component-buttonComponent-bae42a4b027da00773ce70d5b2c1e13c",
            "file": "src/components/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-Button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "\n<div class=\"container\">\n\n<button>button</button>\n</div>\n\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'app-Button',\r\n    template:`\r\n\r\n        <div class=\"container\">\r\n        \r\n        <button>button</button>\r\n        </div>\r\n        \r\n\r\n    `,\r\n    styleUrls:['./button.component.scss'],\r\n})\r\n\r\nexport class buttonComponent{\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n    button{\r\n        color: white;\r\n        background-color: #0275d8;\r\n        padding: 5px;\r\n        border-radius: 3px;\r\n    }\r\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "cardComponent",
            "id": "component-cardComponent-94714c9695af4c1853bd4a46159bc5b7",
            "file": "src/components/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "template": "\n    <div class=\"container\">\n    <div class=\"card\">\n\n    <div>\n    <lable>User ID</lable>\n    <input type=\"text\">\n    </div>\n   <div>\n   <lable>Password</lable>\n    <input type=\"password\">\n   </div>\n\n   <div>\n   <button>Login</button>\n   </div>\n</div>\n    </div>\n\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'app-card',\r\n    template:`\r\n\r\n        <div class=\"container\">\r\n        <div class=\"card\">\r\n\r\n        <div>\r\n        <lable>User ID</lable>\r\n        <input type=\"text\">\r\n        </div>\r\n       <div>\r\n       <lable>Password</lable>\r\n        <input type=\"password\">\r\n       </div>\r\n        \r\n       <div>\r\n       <button>Login</button>\r\n       </div>\r\n    </div>\r\n        </div>\r\n        \r\n\r\n    `,\r\n    styleUrls:['./card.component.scss'],\r\n})\r\n\r\nexport class cardComponent{\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-family: 'Times New Roman', Times, serif;\r\n    .card{\r\n        width: auto;\r\n        height: 200px;\r\n        border: 1px solid black; \r\n        display: flex;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        border-radius: 2px;\r\n        div{\r\n            margin: 5px;\r\n        }\r\n        button{\r\n            color: white;\r\n            background-color: black;\r\n            padding: 5px 5px 5px 5px;\r\n            border-radius: 2px;\r\n        }\r\n\r\n        input{\r\n            padding: 3px;\r\n        }\r\n    }  \r\n}\r\n\r\n\r\n\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "CounterButtonsComponent",
            "id": "component-CounterButtonsComponent-aeb825f593940419c1c8a2aa65749ce4",
            "file": "src/app/counter/counter-buttons/counter-buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-counter-buttons",
            "styleUrls": [
                "./counter-buttons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./counter-buttons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDecrement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onIncrement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { decrement, increment, reset } from '../state/counter.actions';\r\nimport { CounterState } from '../state/counter.state';\r\n\r\n@Component({\r\n  selector: 'app-counter-buttons',\r\n  templateUrl: './counter-buttons.component.html',\r\n  styleUrls: ['./counter-buttons.component.scss']\r\n})\r\nexport class CounterButtonsComponent implements OnInit {\r\n\r\n  constructor( private store: Store<{counter: CounterState}>) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onIncrement(){\r\n    this.store.dispatch(increment());\r\n  }\r\n  onDecrement(){\r\n    this.store.dispatch(decrement());\r\n  }\r\n  onReset(){\r\n    this.store.dispatch(reset());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n    display: flex;\r\n    justify-content: center;\r\n    .buttons{\r\n        display: flex; \r\n        button{\r\n            margin-left: 6px;\r\n            padding: 8px;\r\n            border-radius: 2px;\r\n            border: none;\r\n        }\r\n        .increment{\r\n            background-color: var(--secondary);\r\n        }\r\n        .decrement{\r\n            background-color: var(--secondary);\r\n        }\r\n        .reset{\r\n            background-color: var(--secondary);\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./counter-buttons.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <div class=\"buttons\">\n        <button (click)=\"onIncrement()\" class=\"increment\">Increment</button> \n        <button (click)=\"onDecrement()\" class=\"decrement\">Decrement</button> \n        <button (click)=\"onReset()\" class=\"reset\">Reset</button>\n    </div>    \n</div>"
        },
        {
            "name": "CounterComponent",
            "id": "component-CounterComponent-d2b1cb6a9eb364452b489480f3552f70",
            "file": "src/app/counter/counter/counter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-counter",
            "styleUrls": [
                "./counter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./counter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.scss']\n})\nexport class CounterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./counter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<app-counter-output></app-counter-output>\r\n<app-counter-buttons></app-counter-buttons>\r\n<app-custom-counter-input></app-custom-counter-input>"
        },
        {
            "name": "CounterOutputComponent",
            "id": "component-CounterOutputComponent-1e9310d229963b65d2eb0c41d7101677",
            "file": "src/app/counter/counter-output/counter-output.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-counter-output",
            "styleUrls": [
                "./counter-output.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./counter-output.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "counter$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { AppState } from 'src/app/store/app.state';\r\nimport { getCounter } from '../state/counter.selectors';\r\nimport { CounterState } from '../state/counter.state';\r\n\r\n@Component({\r\n  selector: 'app-counter-output',\r\n  templateUrl: './counter-output.component.html',\r\n  styleUrls: ['./counter-output.component.scss']\r\n})\r\nexport class CounterOutputComponent implements OnInit {\r\n\r\n  counter$: Observable<number>;\r\n  \r\n  constructor(private store:Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n    \r\n    this.counter$ = this.store.select(getCounter);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n    display: flex;\r\n    justify-content: center;\r\n}",
                    "styleUrl": "./counter-output.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <h3>counter is: {{ (counter$ | async)}}</h3>\r\n\r\n    <!-- <h3>Counter is {{ (counter$ | async)!.counter}}</h3> -->\r\n</div>"
        },
        {
            "name": "CustomCounterInputComponent",
            "id": "component-CustomCounterInputComponent-f9a90b41176e2213fe9eb2cd20b0b322",
            "file": "src/app/counter/custom-counter-input/custom-counter-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-custom-counter-input",
            "styleUrls": [
                "./custom-counter-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-counter-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "channelName$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changeText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { AppState } from 'src/app/store/app.state';\r\nimport { customIncrement, onchangeChangeChannel } from '../state/counter.actions';\r\nimport { getChannel } from '../state/counter.selectors';\r\nimport { CounterState } from '../state/counter.state';\r\n\r\n@Component({\r\n  selector: 'app-custom-counter-input',\r\n  templateUrl: './custom-counter-input.component.html',\r\n  styleUrls: ['./custom-counter-input.component.scss']\r\n})\r\nexport class CustomCounterInputComponent implements OnInit {\r\n\r\n  value:number ;\r\n  channelName$: Observable<string>;\r\n  constructor(private store:Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.channelName$ = this.store.select(getChannel);\r\n  }\r\n\r\n  onAdd(){\r\n    console.log(this.value);\r\n    this.store.dispatch(customIncrement({value: +this.value}))\r\n  }\r\n\r\n  changeText(){\r\n    this.store.dispatch(onchangeChangeChannel())\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n    margin-top: 6px;\r\n    display: flex;\r\n    justify-content: center;\r\n    input{\r\n        margin-right: 4px;\r\n    }\r\n    button{\r\n        background-color: var(--secondary);\r\n        border-radius: 4px;\r\n        padding: 5px 8px;\r\n    }\r\n}",
                    "styleUrl": "./custom-counter-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n    <p>{{(channelName$ | async) }}</p><br>\r\n</div>\r\n<div class=\"container\">\r\n    \r\n    <input type=\"text\" placeholder=\"enter value\" [(ngModel)]=\"value\">\r\n    <button (click)=\"onAdd()\">Add</button>\r\n</div>\r\n<div class=\"container\">\r\n    <button (click)=\"changeText()\">Change</button>\r\n</div>"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-f6b8d558ad1a776b0c1b5364ba74bba9",
            "file": "src/app/dialog-module/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onClose",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "childComponentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "insertionPoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InsertionDirective",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "InsertionDirective"
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "defaultValue": "this._onClose.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadChildComponent",
                    "args": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDialogClicked",
                    "args": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOverlayClicked",
                    "args": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Type,\n  OnDestroy,\n  AfterViewInit,\n  ComponentRef,\n  ViewChild,\n  ComponentFactoryResolver,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DialogRef } from '../dialog-ref';\nimport { InsertionDirective } from '../insertion.directive';\n// import { DialogRef } from './dialog-ref';\n\n@Component({\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss']\n})\nexport class DialogComponent implements AfterViewInit, OnDestroy {\n\n  componentRef: ComponentRef<any>;\n  childComponentType: Type<any>;\n\n  @ViewChild(InsertionDirective) insertionPoint: InsertionDirective;\n\n  private readonly _onClose = new Subject<any>();\n  public onClose = this._onClose.asObservable();\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private cd: ChangeDetectorRef,\n    private dialogRef: DialogRef\n  ) { }\n\n  ngAfterViewInit(): void {\n    this.loadChildComponent(this.childComponentType);\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    if (this.componentRef) {\n      this.componentRef.destroy();\n    }\n  }\n\n  onOverlayClicked(evt: MouseEvent): void {\n    this.dialogRef.close();\n  }\n\n  onDialogClicked(evt: MouseEvent): void {\n    evt.stopPropagation();\n  }\n\n  loadChildComponent(componentType: Type<any>): void {\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n\n    let viewContainerRef = this.insertionPoint.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent(componentFactory);\n  }\n\n  close(): void {\n    this._onClose.next();\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"overlay\" (click)=\"onOverlayClicked($event)\">\n    <div class=\"dialog\" (click)=\"onDialogClicked($event)\">\n      <ng-template appInsertion>\n      </ng-template>\n    </div>\n  </div>\n  "
        },
        {
            "name": "EditbookComponent",
            "id": "component-EditbookComponent-47893ab256f1131dfc1d880cf955c6d3",
            "file": "src/app/books/editbook/editbook.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-editbook",
            "styleUrls": [
                "./editbook.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editbook.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "book",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Books",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "booksForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "bookSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "show",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subscription } from 'rxjs';\r\nimport { DialogConfig } from 'src/app/dialog-module/dialog-config';\r\nimport { DialogRef } from 'src/app/dialog-module/dialog-ref';\r\nimport { Books } from 'src/app/shared/header/models/books.model';\r\nimport { AppState } from 'src/app/store/app.state';\r\nimport { updateBook } from '../state/books.actions';\r\nimport { getBookById } from '../state/books.selector';\r\n\r\n@Component({\r\n  selector: 'app-editbook',\r\n  templateUrl: './editbook.component.html',\r\n  styleUrls: ['./editbook.component.scss']\r\n})\r\nexport class EditbookComponent implements OnInit,OnDestroy {\r\n\r\n  book: Books;\r\n  booksForm: FormGroup;\r\n  bookSubscription: Subscription;\r\n  show: boolean = true;\r\n  constructor(private route:  ActivatedRoute, private store:Store<AppState>,\r\n    private router: Router,public config: DialogConfig, public dialog: DialogRef) { }\r\n\r\n  ngOnInit(): void { \r\n    // this.route.paramMap.subscribe((parames)=>{\r\n    //   const id = parames.get('id');\r\n    //  this.bookSubscription = this.store.select(getBookById, { id } ).subscribe((data)=>{\r\n    //     this.book = data;\r\n    //     this.createForm();\r\n    //   })\r\n    // })   \r\n  }\r\n\r\n  createForm(){\r\n    this.booksForm = new FormGroup({\r\n      title: new FormControl(this.book.title,\r\n        [Validators.required ]),\r\n      description: new FormControl(this.book.description,[Validators.required])\r\n    })\r\n  }\r\n\r\n  onSubmit(){\r\n    console.log(\"in\");\r\n    if(!this.booksForm.valid){\r\n      return;\r\n    }\r\n    const title = this.booksForm.value.title;\r\n    const description = this.booksForm.value.description;\r\n    const isbn = this.booksForm.value.isbn;\r\n    const price = this.booksForm.value.price\r\n    const book: Books={\r\n      id: this.book.id,\r\n      title,\r\n      description,\r\n      isbn,\r\n      price\r\n    }\r\n\r\n    this.store.dispatch(updateBook({book}))\r\n  }\r\n  ngOnDestroy(){\r\n    this.bookSubscription.unsubscribe();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 20px;\r\n    form{\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n    button{\r\n        background-color: var(--secondary);\r\n        padding: 5px 5px 5px 5px;\r\n        border-radius: 3px;\r\n        cursor: pointer;\r\n    }\r\n    .error {\r\n        font-size: 15px;\r\n     }\r\n    \r\n     .error-msg{\r\n        color: red;\r\n        font-size: 12px;\r\n    }\r\n}",
                    "styleUrl": "./editbook.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- <div class=\"container\" *ngIf=\"show\"> \r\n    <div class=\"addForm\">\r\n        <form [formGroup]=\"booksForm\" (ngSubmit)=\"onSubmit()\">\r\n            <h3>Update Book Details</h3>\r\n            <div class=\"title\">\r\n                    <label for=\"fname\">Title</label> <br>\r\n                    <input type=\"text\" id=\"fname\" placeholder=\"book title\"  formControlName=\"title\">\r\n                    <div *ngIf=\"booksForm.controls['title'].errors && booksForm.controls['title'].touched\"\r\n                    class=\"error-msg\">\r\n                    <div class=\"error\" [hidden]=\"!booksForm.controls['title'].errors.required\">please enter book title</div>\r\n                    <div class=\"error\" [hidden]=\"!booksForm.controls['title'].errors.minLength\">please enter minimum 6 char</div>\r\n                    </div> \r\n                    \r\n            </div>\r\n            <div class=\"description\">\r\n                <label for=\"lname\">Description</label> <span class=\"mandetory\">*</span><br>\r\n                <textarea rows=\"4\" cols=\"30\" placeholder=\"book description here\"  formControlName=\"description\"></textarea>\r\n                <div *ngIf=\"booksForm.controls['description'].errors && booksForm.controls['description'].touched\"\r\n                class=\"error-msg\">\r\n                <div class=\"error\" [hidden]=\"!booksForm.controls['description'].errors.required\">please enter book Description</div>\r\n            </div> \r\n           \r\n            </div>\r\n            <div class=\"submit\">\r\n                <button type=\"submit\" >Update</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div> -->\r\n<div class=\"text-wrapper\">\r\n    <p>{{ config.data.message }}</p>\r\n  </div>\r\n  <div class=\"actions\">\r\n    <!-- <button class=\"button\" (click)=\"onClose()\">CANCEL</button>\r\n    <button class=\"button\" (click)=\"onClose()\">OK</button> -->\r\n  </div>"
        },
        {
            "name": "ForgetPasswordComponent",
            "id": "component-ForgetPasswordComponent-bd83e181c8d558f75b61be7cd5c56d0d",
            "file": "src/app/auth/forget-password/forget-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forget-password",
            "styleUrls": [
                "./forget-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forget-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html',\r\n  styleUrls: ['./forget-password.component.scss']\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.container {\r\n    background-image: url(\"../../../assets/bg.jpg\");\r\n    min-height: 73.5vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    .error {\r\n        font-size: 15px;\r\n     }\r\n    \r\n     .error-msg{\r\n        color: red;\r\n        font-size: 12px;\r\n    }\r\n    .loginContainer {\r\n        height: 150px;\r\n        width: 300px;\r\n        background: var(--background);\r\n        padding: 50px;\r\n        border-radius: 10px;\r\n        position: relative;\r\n        text-align: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        border: 1px solid black;\r\n\r\n        .newUser{\r\n            display: flex;\r\n            justify-content: space-evenly;\r\n            position: relative;\r\n            top: 10px;\r\n\r\n            span{\r\n                color: #1b556d;\r\n            }\r\n            .newuser1,.forgotpass{\r\n                cursor: pointer;\r\n            }\r\n        }\r\n\r\n        .forgotpass{\r\n            position: relative;\r\n            top: 7px;\r\n        }\r\n\r\n        button{\r\n            cursor: pointer;\r\n        }\r\n        input{\r\n            border-radius: 2px solid black;\r\n            padding: 5px 0px 5px 3px;\r\n            margin: 5px 0px 5px 0px;   \r\n        }\r\n        #nameLable{\r\n            position: relative;\r\n            right: 54px;\r\n        }\r\n        #passLable{\r\n            position: relative;\r\n            right: 51px;\r\n        }\r\n        button{\r\n            margin-top: 5px;\r\n            background-color: #00000099;\r\n            padding: 5px 15px 5px 15px;\r\n            border-radius: 3px;\r\n\r\n        }\r\n      }\r\n  }\r\n ",
                    "styleUrl": "./forget-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n\r\n\r\n<div class=\"container\">\r\n    <form>\r\n      <div class=\"loginContainer\">   \r\n          <div>\r\n              <p>Enter your email and we'll send you a link to reset you password</p>\r\n          </div> \r\n        <div class=\"email\">\r\n          <label for=\"fname\" id=\"nameLable\"></label> <br>\r\n          <input type=\"text\" id=\"fname\" placeholder=\"Enter your Email\" >\r\n          \r\n        </div>\r\n        \r\n        <div class=\"submit\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n  \r\n        <div class=\"newUser\">\r\n            <div class=\"forgotpass\">\r\n                <span [routerLink]=\"['/']\">Back to Login?</span>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  \r\n  "
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-ef95b1c5080dd622951df94b49bd7146-1",
            "file": "src/app/shared/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAdminLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isUserLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  isUserLoggedIn: boolean = false;\r\n  isAdminLoggedIn: boolean = false;\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if(localStorage.getItem(\"usertype\") === \"user\"){\r\n      this.isUserLoggedIn = false;\r\n    }else{\r\n      this.isAdminLoggedIn = true;\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "  \r\n  nav {\r\n    width: auto;\r\n    background-color: rgb(81, 67, 87);;\r\n    padding-left: 30px;\r\n    padding-right: 10px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    .nav-links {\r\n        list-style: none;\r\n        display: flex;\r\n      }\r\n\r\n      .nav-item a {\r\n        display: inline-block;\r\n        padding: 5px 15px;\r\n        text-decoration: none;\r\n        color: white;\r\n      }\r\n\r\n      .nav-item:hover {\r\n        background-color: white;\r\n      }\r\n\r\n      .nav-item:hover a {\r\n        color: rgb(81, 67, 87);\r\n      }\r\n      \r\n  }\r\n\r\n/* Responsive Nav Bar */\r\n@media all and (max-width: 600px) {\r\n    nav ul {\r\n        flex-direction: column;\r\n        // text-align: center;\r\n        position: relative;\r\n        left: 80px;\r\n    }\r\n    nav ul li {\r\n        text-align: center;\r\n        \r\n    }\r\n}\r\n \r\n  \r\n  ",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<nav class=\"navbar\">\r\n    <ul class=\"nav-links\">\r\n      <li class=\"nav-item\"><a [routerLink]=\"['/books']\" routerLinkActive=\"is-active\">Books</a></li> \r\n      <li  class=\"nav-item\"><a [routerLink]=\"['/books/addbooks']\">Add Books</a></li> \r\n      <li class=\"nav-item logout\"><a [routerLink]=\"['/']\">Logout</a></li>\r\n    </ul>\r\n</nav>\r\n<!-- <router-outlet></router-outlet> -->"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-8b7fe0227c0c0066a4126d68b271b26b",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "gotoBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  gotoBooks(){\r\n    this.router.navigate(['/books'])\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.parallax {\r\n  margin-top: -2px;\r\n  background-image: url(\"../../assets/bookstore2.jpg\");\r\n  min-height: 424.5px; \r\n  background-attachment: fixed;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  .text{\r\n    font-family: 'Times New Roman', Times, serif;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 600px) {\r\n  .contain{\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"parallax\">\r\n  <div class=\"text\" style=\"display: flex;justify-content: center;position: relative;\r\n  top: 100px;\">\r\n    <p style=\"color: white;font-size: 50px;cursor: pointer;\" (click)='gotoBooks()' >Buy Your Favourite</p>\r\n    <p style=\"position: relative;\r\n        top: 40px;\r\n    left: -103px;font-size: 50px;color: white;cursor: pointer;\r\n\" (click)='gotoBooks()'> Book From Here</p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "inputComponent",
            "id": "component-inputComponent-1dcf3503fe1bf231634839c389ac6f3e",
            "file": "src/components/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"btnstory\">\n  <button>Submit</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n    selector:\"app-task\",\r\n    template: `\r\n      <div class=\"btnstory\">\r\n        <button>Submit</button>\r\n      </div>\r\n    `,\r\n\r\n})\r\n\r\nexport class inputComponent{\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-8270ebdf5679ef28b7f117512eaef5eb",
            "file": "src/app/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "newUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoginSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { LoginService } from 'src/app/services/login.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  loginform: FormGroup;\r\n  users :any= [];\r\n  constructor(private router: Router, private loginService: LoginService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loginform = new FormGroup({\r\n      email: new FormControl('',[Validators.required]),\r\n      password: new FormControl('',[Validators.required])\r\n    })\r\n  }\r\n\r\n  onLoginSubmit(){\r\n    \r\n    let username = this.loginform.get('email')?.value\r\n    let password = this.loginform.get('password')?.value;\r\n    this.loginService.login(username,password).subscribe(\r\n      data=>{\r\n        if(data){\r\n          this.users = data;\r\n          for(let i=0; i<this.users.length; i++){\r\n            if(this.loginform.value.email = this.users[i][\"email\"] && this.loginform.value.password == this.users[i][\"password\"]){\r\n              localStorage.setItem('usertype',this.users[i]['userType']);\r\n              this.router.navigate(['/home']);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    )\r\n    \r\n  }\r\n  newUser(){\r\n    this.router.navigate(['newuser']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.container {\r\n    background-image: url(\"../../../assets/bg.jpg\");\r\n    min-height: 73.3vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    .error {\r\n        font-size: 15px;\r\n     }\r\n    \r\n     .error-msg{\r\n        color: red;\r\n        font-size: 12px;\r\n    }\r\n    .loginContainer {\r\n        height: 170px;\r\n        width: 300px;\r\n        background: var(--background);\r\n        padding: 50px;\r\n        border-radius: 10px;\r\n        position: relative;\r\n        text-align: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        border: 1px solid black;\r\n        font-family: 'Times New Roman', Times, serif;\r\n        \r\n            div{\r\n                padding: 3px 0px 3px 0px;\r\n            }\r\n        \r\n        .newUser{\r\n            display: flex;\r\n            justify-content: space-evenly;\r\n            position: relative;\r\n            top: 10px;\r\n\r\n            span{\r\n                color: #1b556d;\r\n            }\r\n            .newuser1,.forgotpass{\r\n                cursor: pointer;\r\n            }\r\n        }\r\n\r\n\r\n        input{\r\n            border-radius: 2px solid black;\r\n            padding: 5px 0px 5px 3px;\r\n            margin: 5px 0px 5px 0px;   \r\n        }\r\n        #nameLable{\r\n            position: relative;\r\n            right: 54px;\r\n        }\r\n        #passLable{\r\n            position: relative;\r\n            right: 51px;\r\n        }\r\n        button{\r\n            margin-top: 5px;\r\n            background-color: #00000099;\r\n            color: white;\r\n            padding: 8px 8px 8px 8px;\r\n            border-radius: 3px;\r\n            cursor: pointer;\r\n            width: 70px;\r\n        }\r\n        .submit{\r\n            position: relative;\r\n            right: 48px;\r\n        }\r\n      }\r\n  }\r\n  \r\n\r\n\r\n  @media (max-width:320px)  { \r\n    .loginContainer{\r\n        width: 250px;\r\n    }\r\n   }\r\n\r\n\r\n\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n\r\n\r\n<div class=\"container\">\r\n  <form [formGroup]=\"loginform\" >\r\n    <div class=\"loginContainer\">    \r\n      <div class=\"email\">\r\n        <label for=\"fname\" id=\"nameLable\">Login ID</label> <br>\r\n        <input type=\"text\" id=\"fname\" class=\"fname\" placeholder=\"First name\" formControlName=\"email\" >\r\n        <div *ngIf=\"loginform.controls['email'].errors && loginform.controls['email'].touched\"\r\n                    class=\"error-msg\">\r\n            <div class=\"error\" [hidden]=\"!loginform.controls['email'].errors.required\">please enter email</div>\r\n            </div>\r\n      </div>\r\n      <div class=\"password\">\r\n        <label for=\"pass\" id=\"passLable\">Password </label><br>\r\n        <input type=\"password\" placeholder=\"enter password here\" formControlName=\"password\">\r\n        <div *ngIf=\"loginform.controls['password'].errors && loginform.controls['password'].touched\"\r\n                    class=\"error-msg\">\r\n            <div class=\"error\" [hidden]=\"!loginform.controls['password'].errors.required\">please enter password</div>\r\n            </div>\r\n      </div>\r\n      <div class=\"submit\">\r\n        <button type=\"submit\" class=\"login\" [disabled]=\"!loginform.valid\" (click)=\"onLoginSubmit()\">Login</button>\r\n      </div>\r\n\r\n      <div class=\"newUser\">\r\n          <div class=\"forgotpass\">\r\n              <span [routerLink]=\"['/forgetPass']\">Forget Password?</span>\r\n          </div>\r\n          <div class=\"newuser1\">\r\n              <span (click)=\"newUser()\">new user?</span>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n<!-- forgetPass -->\r\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-3244701747ca164d51fbe5869e85fd1c",
            "file": "src/app/shared/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrls: ['./navigation.component.scss']\r\n})\r\nexport class NavigationComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegisterUserComponent",
            "id": "component-RegisterUserComponent-1e7b4070a6bd7d650901c9d5cb82d1fb",
            "file": "src/app/newuser/register-user/register-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-user",
            "styleUrls": [
                "./register-user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registrationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { UserRegister } from 'src/app/shared/header/models/register.model';\r\nimport { AppState } from 'src/app/store/app.state';\r\nimport { addUser } from '../state/newuser.actions';\r\n\r\n@Component({\r\n  selector: 'app-register-user',\r\n  templateUrl: './register-user.component.html',\r\n  styleUrls: ['./register-user.component.scss']\r\n})\r\nexport class RegisterUserComponent implements OnInit {\r\n\r\n  registrationForm: FormGroup;\r\n  constructor(private router: Router,private store: Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.registrationForm = new FormGroup({\r\n      fName: new FormControl(null,[Validators.required ]),\r\n        lName: new FormControl(null,[Validators.required]),\r\n        email: new FormControl(null,[Validators.required]),\r\n        password: new FormControl(null,[Validators.required]),\r\n        userType: new FormControl(\"Admin\"),  \r\n    })\r\n  }\r\n\r\n\r\n  onRegister(){\r\n    if(!this.registrationForm.valid){\r\n      return;\r\n    }\r\n    const user : UserRegister ={\r\n      fName: this.registrationForm.value.fName,\r\n      lName: this.registrationForm.value.lName,\r\n      email: this.registrationForm.value.email,\r\n      password: this.registrationForm.value.password,\r\n      userType: this.registrationForm.value.userType\r\n    };\r\n    this.store.dispatch(addUser({user}))\r\n    console.log(\"user data is\",user)\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".main{\r\n    background-image: url(\"../../../assets/bg.jpg\");\r\n    min-height: 73.2vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n.container{\r\n    width: 400px;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    border: 1px solid rgb(53, 47, 47);\r\n    background: var(--background);\r\n    border-radius: 2px;\r\n    padding: 7px 0px 7px 0px;\r\n    div{\r\n        padding: 2.5px 0px 2.5px 0px;\r\n    }\r\n    .mandetory{\r\n        color: red;\r\n    }\r\n    input{\r\n        border-radius: 2px solid black;\r\n        padding: 5px 0px 5px 3px;\r\n        margin: 5px 0px 5px 0px;\r\n        \r\n    }\r\n    \r\n    ::placeholder {\r\n        color: rgb(141, 133, 133);\r\n    }\r\n    label{\r\n       color:black\r\n    }\r\n    .personalInfo{\r\n        display: flex;\r\n        margin: 10px 0px 10px 0px;\r\n        flex-direction: row;\r\n        .fname{\r\n            margin-right: 3px;\r\n        }    \r\n        \r\n    }\r\n\r\n    .otherinfo{\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-bottom: 6px;\r\n        input{\r\n            min-width: 250px;\r\n        }\r\n        #userType{\r\n            padding: 5px 0px 5px 3px;\r\n            margin: 5px 0px 5px 0px;\r\n            min-width: 254px;\r\n        }\r\n        .submit{\r\n           display: flex;\r\n           \r\n           button{\r\n            margin-top: 5px;\r\n            background-color: #00000099;\r\n            color: white;\r\n            padding: 8px 8px 8px 8px;\r\n            border-radius: 3px;\r\n            cursor: pointer;\r\n            width: 70px;\r\n           \r\n           }\r\n           .backtologin{\r\n              position: relative;\r\n              left: 5px;\r\n              cursor: pointer;\r\n            //   width: 100px !important;\r\n           }\r\n        }\r\n     \r\n    }\r\n   \r\n}\r\n}\r\n",
                    "styleUrl": "./register-user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main\">\r\n    <form [formGroup]=\"registrationForm\" (ngSubmit)=\"onRegister()\">\r\n    <div class=\"container\">  \r\n        <div class=\"otherinfo\">\r\n            <div class=\"fname\">\r\n                <label for=\"fname\">First Name</label> <span class=\"mandetory\">*</span> <br>\r\n                 <input type=\"text\" id=\"fname\" placeholder=\"First name\" formControlName=\"fName\">\r\n            </div>\r\n            <div class=\"lname\">\r\n                <label for=\"lname\">Last Name</label> <span class=\"mandetory\">*</span><br>\r\n                <input type=\"text\" placeholder=\"Last name\" id=\"lname\" formControlName=\"lName\">\r\n            </div>\r\n            <div class=\"workemail\">\r\n                <label for=\"workemail\">Email <span class=\"mandetory\">*</span></label> <br>\r\n                <input type=\"email\" placeholder=\"i.e abc@gmail.com\" formControlName=\"email\">\r\n            </div>\r\n            <div class=\"password\">\r\n                <label for=\"pass\">Password <span class=\"mandetory\">*</span></label><br>\r\n                <input type=\"password\" placeholder=\"enter password here\" formControlName=\"password\">\r\n            </div> \r\n            <div class=\"userType\">\r\n                <label for=\"userType\">User Type <span class=\"mandetory\">*</span></label><br>\r\n                <select name=\"userType\" id=\"userType\" formControlName=\"userType\">\r\n                    <option value=\"admin\" selected>Admin</option>\r\n                    <option value=\"user\">User</option>\r\n\r\n                </select>\r\n            </div>\r\n            <div class=\"submit\">\r\n                <div class=\"submitbtn\" type=\"submit\"><button>Register</button></div> \r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n</form>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-1b0b9cf3e205db5d69e927f803e95930",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './shared/header/header.component';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\n\r\nimport { environment } from '../environments/environment';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { appReducer } from './store/app.state';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { LoginComponent } from './auth/login/login.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NavigationComponent } from './shared/navigation/navigation.component';\r\nimport { HomeComponent } from './home/home.component';\r\n// import { TestComponent } from './test/test.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AboutusComponent } from './shared/aboutus/aboutus.component';\r\nimport { EditbookComponent } from './books/editbook/editbook.component';\r\nimport { LoginService } from './services/login.service';\r\nimport { BooksService } from './services/books.service';\r\nimport { RegisterUserService } from './services/register-user.service';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent, \r\n    HeaderComponent, NavigationComponent, HomeComponent, AboutusComponent,\r\n  \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,\r\n    StoreModule.forRoot({}),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\r\n    BrowserAnimationsModule,\r\n  ],\r\n  providers: [LoginService, BooksService,RegisterUserService],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [EditbookComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "BooksService"
                        },
                        {
                            "name": "LoginService"
                        },
                        {
                            "name": "RegisterUserService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutusComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-8a32cc428092a345e2ff64cd5d9f04f6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ForgetPasswordComponent } from './auth/forget-password/forget-password.component';\r\nimport { LoginComponent } from './auth/login/login.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { AboutusComponent } from './shared/aboutus/aboutus.component';\r\nimport { HeaderComponent } from './shared/header/header.component';\r\nimport { NavigationComponent } from './shared/navigation/navigation.component';\r\n\r\nconst routes: Routes = [\r\n  { \r\n    path:'login', component:LoginComponent\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: '/home',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path:'home',\r\n    component: HomeComponent\r\n  },\r\n  {\r\n    path:\"login\", component:LoginComponent\r\n  },\r\n  {\r\n    path:'header',\r\n    component:HeaderComponent, \r\n  },\r\n \r\n  {\r\n    path:'forgetPass',\r\n    component:ForgetPasswordComponent\r\n  },\r\n  {\r\n    path:'aboutus',\r\n    component:AboutusComponent\r\n  },\r\n  {\r\n    path: 'counter',\r\n    loadChildren: () =>\r\n      \"import('./counter/counter.module').then((m) => m.CounterModule)\",\r\n  },\r\n  {\r\n    path: 'newuser',\r\n    loadChildren: () =>\r\n      \"import('./newuser/newuser.module').then((m) => m.NewuserModule)\",\r\n  },\r\n  {\r\n    path:'books',\r\n    loadChildren:()=>\r\n    \"import('./books/books.module').then((m)=>m.BooksModule)\"\r\n  },\r\n  {\r\n    path:'auth',\r\n    loadChildren:()=>\r\n    \"import('./auth/auth.module').then((m)=>m.AuthModule)\"\r\n  }\r\n \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-2e31658a6e719fe30e5f0527248c1481",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    children:[\r\n      { \r\n        path:'',\r\n        redirectTo:'login'\r\n      },\r\n      {\r\n        path:'login',\r\n        component:LoginComponent\r\n      }\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ForgetPasswordComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(routes),\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ForgetPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BooksModule",
            "id": "module-BooksModule-4559f96642c06a0c5129dcd92ac8af80",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/books/books.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BooksComponent } from './books/books.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AddbooksComponent } from './addbooks/addbooks.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { EditbookComponent } from './editbook/editbook.component';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { booksReducer } from './state/books.reducer';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { BooksEffects } from './state/books.effects';\r\nimport { DialogService } from '../dialog-module/dialog.service';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: BooksComponent,\r\n    children:[\r\n      {\r\n        path:'edit/:id',\r\n        component:EditbookComponent\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: 'book',\r\n    component: BooksComponent,\r\n  },\r\n  {\r\n    path:'addbooks',\r\n    component:AddbooksComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BooksComponent,\r\n    AddbooksComponent,\r\n    EditbookComponent,\r\n   \r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    StoreModule.forFeature('books',booksReducer),\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    EffectsModule.forRoot([BooksEffects])\r\n  ],\r\n  \r\n  providers:[DialogService]\r\n  \r\n})\r\nexport class BooksModule { }\r\n\r\n\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddbooksComponent"
                        },
                        {
                            "name": "BooksComponent"
                        },
                        {
                            "name": "EditbookComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CounterModule",
            "id": "module-CounterModule-e5da5967a83a81a95b2b71044b83cdcd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/counter/counter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CounterComponent } from './counter/counter.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CounterOutputComponent } from './counter-output/counter-output.component';\r\nimport { CounterButtonsComponent } from './counter-buttons/counter-buttons.component';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { counterReducer } from './state/counter.reducer';\r\nimport { CustomCounterInputComponent } from './custom-counter-input/custom-counter-input.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { COUNTER_STATE_NAME } from './state/counter.selectors';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from 'src/environments/environment';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CounterComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CounterComponent,\r\n    CounterOutputComponent,\r\n    CounterButtonsComponent,\r\n    CustomCounterInputComponent,\r\n\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule.forChild(routes),\r\n    StoreModule.forFeature(COUNTER_STATE_NAME, counterReducer),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\r\n  ]\r\n})\r\nexport class CounterModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CounterButtonsComponent"
                        },
                        {
                            "name": "CounterComponent"
                        },
                        {
                            "name": "CounterOutputComponent"
                        },
                        {
                            "name": "CustomCounterInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "id": "module-DialogModule-181c727357046e181011484d1af217ab",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/dialog-module/dialog-module.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// import { DialogComponent } from './dialog.component';\nimport { InsertionDirective } from './insertion.directive';\nimport { DialogComponent } from './dialog/dialog.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [DialogComponent, InsertionDirective],\n  entryComponents: [DialogComponent]\n})\nexport class DialogModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "InsertionDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NewuserModule",
            "id": "module-NewuserModule-62d50912b2457706073e40554fb98c90",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/newuser/newuser.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RegisterUserComponent } from './register-user/register-user.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { NewUserEffects } from './state/newuser.effects';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegisterUserComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RegisterUserComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    EffectsModule.forRoot([NewUserEffects])\r\n  ]\r\n})\r\nexport class NewuserModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegisterUserComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_booksReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(initialState, on(addBooksSuccess, (state, action)=>{\r\n    let book = {...action.book};\r\n    \r\n    return{\r\n        ...state,\r\n        books:[...state.books,book]\r\n    }\r\n}),\r\non(updateBookSuccess, (state,action)=>{\r\n    const updatedbook = state.books.map((book)=>{\r\n        return action.book.id === book.id ? action.book: book;\r\n    })\r\n    return{\r\n        ...state,\r\n        books: updatedbook\r\n    }\r\n}),\r\non(deleteBookSucces, (state,{id})=>{\r\n    const  updatedbook = state.books.filter(book=>{\r\n        return book.id!==id\r\n    })\r\n    return{\r\n        ...state,   \r\n        books: updatedbook\r\n    }\r\n}),\r\non(loadBookSuccess, (state, action)=>{\r\n    return{\r\n        ...state,\r\n        books: action.books\r\n    }\r\n})\r\n)"
            },
            {
                "name": "_counterReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(initialState, on(increment, (state)=>{\r\n    return{\r\n        ...state,\r\n        counter: state.counter + 1\r\n    }\r\n}),\r\non(decrement, (state)=>{\r\n    return{\r\n        ...state,\r\n        counter: state.counter - 1\r\n    }\r\n}),\r\non(reset, (state)=>{\r\n    return{\r\n        ...state,\r\n        counter: 0\r\n    }\r\n}),\r\non(customIncrement, (state,action)=>{\r\n    console.log(action);\r\n    return{\r\n        ...state,\r\n        counter: state.counter + action.value,\r\n    }\r\n}),\r\non(onchangeChangeChannel,(state)=>{\r\n    return{\r\n        ...state,\r\n        channelName:'Production Channel'\r\n    }\r\n})\r\n)"
            },
            {
                "name": "_userReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/newuser/state/newuser.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(initialState, on(addUserSuccess, (state, action)=>{\r\n    let book = {...action.user};\r\n    \r\n    return{\r\n        ...state,\r\n        books:[...state.user,book]\r\n    }\r\n}))"
            },
            {
                "name": "actionData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    onTitleChange: action('onTitleChange'),\r\n    onColorChange: action('onColorChange')\r\n}"
            },
            {
                "name": "actionData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    onTitleChange: action('onTitleChange'),\r\n    onColorChange: action('onColorChange')\r\n}"
            },
            {
                "name": "actionData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    onButtonChange: action('onButtonChange'),\r\n    onArchiveTask: action('onArchiveTask')\r\n}"
            },
            {
                "name": "ADD_Book_ACTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[ book page ] add book'"
            },
            {
                "name": "ADD_BOOKS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[book page] add book success'"
            },
            {
                "name": "ADD_USER_ACTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/newuser/state/newuser.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[ user page ] add user'"
            },
            {
                "name": "ADD_USER_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/newuser/state/newuser.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[book page] add user success'"
            },
            {
                "name": "addbooks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(ADD_Book_ACTION, props<{ book: Books}>())"
            },
            {
                "name": "addBooksSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(ADD_BOOKS_SUCCESS, props<{ book: Books}>())"
            },
            {
                "name": "addUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/newuser/state/newuser.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(ADD_USER_ACTION, props<{ user: UserRegister}>())"
            },
            {
                "name": "addUserSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/newuser/state/newuser.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(ADD_USER_SUCCESS, props<{ user: UserRegister}>())"
            },
            {
                "name": "appReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    counter: counterReducer,\r\n    books: booksReducer,\r\n    user: UserReducer\r\n}"
            },
            {
                "name": "BOOK_STATE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'books'"
            },
            {
                "name": "COUNTER_STATE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'counter'"
            },
            {
                "name": "customIncrement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"customIncrement\", props<{value:number}>())"
            },
            {
                "name": "decrement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('decrement')"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DELETE_BOOK_ACTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[ book page] delete book'"
            },
            {
                "name": "DELETE_BOOK_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[ book page] delete book success'"
            },
            {
                "name": "deleteBook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(DELETE_BOOK_ACTION, props<{ id: any}>())"
            },
            {
                "name": "deleteBookSucces",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(DELETE_BOOK_SUCCESS, props<{ id: string}>())"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "getBookById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getBooksState, (state:any , props:any)=>{\r\n   return state.books.find( (book:any)=> book.id === props.id );\r\n})"
            },
            {
                "name": "getBooks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getBooksState, (state)=>{\r\n    return state.books;\r\n})"
            },
            {
                "name": "getBooksState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<BooksState>('books')"
            },
            {
                "name": "getChannel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getCounterState, (state)=>{\r\n    return state.channelName;\r\n})"
            },
            {
                "name": "getCounter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getCounterState, (state)=>{\r\n    return state.counter;\r\n})"
            },
            {
                "name": "getCounterState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<CounterState>(COUNTER_STATE_NAME)"
            },
            {
                "name": "increment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('increment')"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BooksState",
                "defaultValue": "{\r\n    books: [],\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CounterState",
                "defaultValue": "{\r\n    counter: 4,\r\n    channelName:'Test Channel'\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/newuser/state/newuser.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UserState",
                "defaultValue": "{\r\n    user: [],\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LOAD_BOOK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[ book page ] load book'"
            },
            {
                "name": "LOAD_BOOK_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[ book page ] load books success'"
            },
            {
                "name": "loadBooks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(LOAD_BOOK)"
            },
            {
                "name": "loadBookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(LOAD_BOOK_SUCCESS, props<{ books: Books[]}>())"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "onchangeChangeChannel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('onchangeChangeChannel')"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/counter/state/counter.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('reset')"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<buttonComponent>",
                "defaultValue": "orgs=>({\r\n    props:{\r\n        onTitleChange: actionData.onColorChange,\r\n        onColorChange: actionData.onColorChange,\r\n    },\r\n    \r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<cardComponent>",
                "defaultValue": "orgs=>({\r\n    props:{\r\n        onTitleChange: actionData.onColorChange,\r\n        onColorChange: actionData.onColorChange,\r\n    },\r\n    \r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<inputComponent>",
                "defaultValue": "orgs=>({\r\n    props:{\r\n        onButtonChange: actionData.onButtonChange,\r\n        onArchiveTask: actionData.onArchiveTask,\r\n    },\r\n    \r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "UPDATE_BOOK_ACTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[ book page] update book'"
            },
            {
                "name": "UPDATE_BOOK_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[ book page] update book success'"
            },
            {
                "name": "updateBook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(UPDATE_BOOK_ACTION,\r\n    props<{ book: Books}>())"
            },
            {
                "name": "updateBookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/state/books.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(UPDATE_BOOK_SUCCESS,  props<{ book: Books}>())"
            }
        ],
        "functions": [
            {
                "name": "booksReducer",
                "file": "src/app/books/state/books.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "counterReducer",
                "file": "src/app/counter/state/counter.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "UserReducer",
                "file": "src/app/newuser/state/newuser.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/books/state/books.reducer.ts": [
                {
                    "name": "_booksReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(initialState, on(addBooksSuccess, (state, action)=>{\r\n    let book = {...action.book};\r\n    \r\n    return{\r\n        ...state,\r\n        books:[...state.books,book]\r\n    }\r\n}),\r\non(updateBookSuccess, (state,action)=>{\r\n    const updatedbook = state.books.map((book)=>{\r\n        return action.book.id === book.id ? action.book: book;\r\n    })\r\n    return{\r\n        ...state,\r\n        books: updatedbook\r\n    }\r\n}),\r\non(deleteBookSucces, (state,{id})=>{\r\n    const  updatedbook = state.books.filter(book=>{\r\n        return book.id!==id\r\n    })\r\n    return{\r\n        ...state,   \r\n        books: updatedbook\r\n    }\r\n}),\r\non(loadBookSuccess, (state, action)=>{\r\n    return{\r\n        ...state,\r\n        books: action.books\r\n    }\r\n})\r\n)"
                }
            ],
            "src/app/counter/state/counter.reducer.ts": [
                {
                    "name": "_counterReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(initialState, on(increment, (state)=>{\r\n    return{\r\n        ...state,\r\n        counter: state.counter + 1\r\n    }\r\n}),\r\non(decrement, (state)=>{\r\n    return{\r\n        ...state,\r\n        counter: state.counter - 1\r\n    }\r\n}),\r\non(reset, (state)=>{\r\n    return{\r\n        ...state,\r\n        counter: 0\r\n    }\r\n}),\r\non(customIncrement, (state,action)=>{\r\n    console.log(action);\r\n    return{\r\n        ...state,\r\n        counter: state.counter + action.value,\r\n    }\r\n}),\r\non(onchangeChangeChannel,(state)=>{\r\n    return{\r\n        ...state,\r\n        channelName:'Production Channel'\r\n    }\r\n})\r\n)"
                }
            ],
            "src/app/newuser/state/newuser.reducer.ts": [
                {
                    "name": "_userReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/newuser/state/newuser.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(initialState, on(addUserSuccess, (state, action)=>{\r\n    let book = {...action.user};\r\n    \r\n    return{\r\n        ...state,\r\n        books:[...state.user,book]\r\n    }\r\n}))"
                }
            ],
            "src/components/button.stories.ts": [
                {
                    "name": "actionData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    onTitleChange: action('onTitleChange'),\r\n    onColorChange: action('onColorChange')\r\n}"
                },
                {
                    "name": "Default1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<buttonComponent>",
                    "defaultValue": "orgs=>({\r\n    props:{\r\n        onTitleChange: actionData.onColorChange,\r\n        onColorChange: actionData.onColorChange,\r\n    },\r\n    \r\n})"
                }
            ],
            "src/components/card.stories.ts": [
                {
                    "name": "actionData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    onTitleChange: action('onTitleChange'),\r\n    onColorChange: action('onColorChange')\r\n}"
                },
                {
                    "name": "Default1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<cardComponent>",
                    "defaultValue": "orgs=>({\r\n    props:{\r\n        onTitleChange: actionData.onColorChange,\r\n        onColorChange: actionData.onColorChange,\r\n    },\r\n    \r\n})"
                }
            ],
            "src/components/input.stories.ts": [
                {
                    "name": "actionData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    onButtonChange: action('onButtonChange'),\r\n    onArchiveTask: action('onArchiveTask')\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<inputComponent>",
                    "defaultValue": "orgs=>({\r\n    props:{\r\n        onButtonChange: actionData.onButtonChange,\r\n        onArchiveTask: actionData.onArchiveTask,\r\n    },\r\n    \r\n})"
                }
            ],
            "src/app/books/state/books.actions.ts": [
                {
                    "name": "ADD_Book_ACTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[ book page ] add book'"
                },
                {
                    "name": "ADD_BOOKS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[book page] add book success'"
                },
                {
                    "name": "addbooks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(ADD_Book_ACTION, props<{ book: Books}>())"
                },
                {
                    "name": "addBooksSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(ADD_BOOKS_SUCCESS, props<{ book: Books}>())"
                },
                {
                    "name": "DELETE_BOOK_ACTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[ book page] delete book'"
                },
                {
                    "name": "DELETE_BOOK_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[ book page] delete book success'"
                },
                {
                    "name": "deleteBook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(DELETE_BOOK_ACTION, props<{ id: any}>())"
                },
                {
                    "name": "deleteBookSucces",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(DELETE_BOOK_SUCCESS, props<{ id: string}>())"
                },
                {
                    "name": "LOAD_BOOK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[ book page ] load book'"
                },
                {
                    "name": "LOAD_BOOK_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[ book page ] load books success'"
                },
                {
                    "name": "loadBooks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(LOAD_BOOK)"
                },
                {
                    "name": "loadBookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(LOAD_BOOK_SUCCESS, props<{ books: Books[]}>())"
                },
                {
                    "name": "UPDATE_BOOK_ACTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[ book page] update book'"
                },
                {
                    "name": "UPDATE_BOOK_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[ book page] update book success'"
                },
                {
                    "name": "updateBook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(UPDATE_BOOK_ACTION,\r\n    props<{ book: Books}>())"
                },
                {
                    "name": "updateBookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(UPDATE_BOOK_SUCCESS,  props<{ book: Books}>())"
                }
            ],
            "src/app/newuser/state/newuser.actions.ts": [
                {
                    "name": "ADD_USER_ACTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/newuser/state/newuser.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[ user page ] add user'"
                },
                {
                    "name": "ADD_USER_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/newuser/state/newuser.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[book page] add user success'"
                },
                {
                    "name": "addUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/newuser/state/newuser.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(ADD_USER_ACTION, props<{ user: UserRegister}>())"
                },
                {
                    "name": "addUserSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/newuser/state/newuser.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(ADD_USER_SUCCESS, props<{ user: UserRegister}>())"
                }
            ],
            "src/app/store/app.state.ts": [
                {
                    "name": "appReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    counter: counterReducer,\r\n    books: booksReducer,\r\n    user: UserReducer\r\n}"
                }
            ],
            "src/app/books/state/books.selector.ts": [
                {
                    "name": "BOOK_STATE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'books'"
                },
                {
                    "name": "getBookById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getBooksState, (state:any , props:any)=>{\r\n   return state.books.find( (book:any)=> book.id === props.id );\r\n})"
                },
                {
                    "name": "getBooks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getBooksState, (state)=>{\r\n    return state.books;\r\n})"
                },
                {
                    "name": "getBooksState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<BooksState>('books')"
                }
            ],
            "src/app/counter/state/counter.selectors.ts": [
                {
                    "name": "COUNTER_STATE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'counter'"
                },
                {
                    "name": "getChannel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getCounterState, (state)=>{\r\n    return state.channelName;\r\n})"
                },
                {
                    "name": "getCounter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getCounterState, (state)=>{\r\n    return state.counter;\r\n})"
                },
                {
                    "name": "getCounterState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<CounterState>(COUNTER_STATE_NAME)"
                }
            ],
            "src/app/counter/state/counter.actions.ts": [
                {
                    "name": "customIncrement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"customIncrement\", props<{value:number}>())"
                },
                {
                    "name": "decrement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('decrement')"
                },
                {
                    "name": "increment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('increment')"
                },
                {
                    "name": "onchangeChangeChannel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('onchangeChangeChannel')"
                },
                {
                    "name": "reset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('reset')"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/books/state/books.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/state/books.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BooksState",
                    "defaultValue": "{\r\n    books: [],\r\n}"
                }
            ],
            "src/app/counter/state/counter.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/counter/state/counter.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CounterState",
                    "defaultValue": "{\r\n    counter: 4,\r\n    channelName:'Test Channel'\r\n}"
                }
            ],
            "src/app/newuser/state/newuser.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/newuser/state/newuser.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "defaultValue": "{\r\n    user: [],\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/books/state/books.reducer.ts": [
                {
                    "name": "booksReducer",
                    "file": "src/app/books/state/books.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/counter/state/counter.reducer.ts": [
                {
                    "name": "counterReducer",
                    "file": "src/app/counter/state/counter.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/newuser/state/newuser.reducer.ts": [
                {
                    "name": "UserReducer",
                    "file": "src/app/newuser/state/newuser.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "",
                        "redirectTo": "/home",
                        "pathMatch": "full"
                    },
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "header",
                        "component": "HeaderComponent"
                    },
                    {
                        "path": "forgetPass",
                        "component": "ForgetPasswordComponent"
                    },
                    {
                        "path": "aboutus",
                        "component": "AboutusComponent"
                    },
                    {
                        "path": "counter",
                        "loadChildren": "./counter/counter.module#CounterModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/counter/counter.module.ts",
                                        "module": "CounterModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "CounterComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CounterModule"
                            }
                        ]
                    },
                    {
                        "path": "newuser",
                        "loadChildren": "./newuser/newuser.module#NewuserModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/newuser/newuser.module.ts",
                                        "module": "NewuserModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "RegisterUserComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "NewuserModule"
                            }
                        ]
                    },
                    {
                        "path": "books",
                        "loadChildren": "./books/books.module#BooksModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/books/books.module.ts",
                                        "module": "BooksModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "BooksComponent",
                                                "children": [
                                                    {
                                                        "path": "edit/:id",
                                                        "component": "EditbookComponent"
                                                    }
                                                ]
                                            },
                                            {
                                                "path": "book",
                                                "component": "BooksComponent"
                                            },
                                            {
                                                "path": "addbooks",
                                                "component": "AddbooksComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "BooksModule"
                            }
                        ]
                    },
                    {
                        "path": "auth",
                        "loadChildren": "./auth/auth.module#AuthModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/auth/auth.module.ts",
                                        "module": "AuthModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "redirectTo": "login"
                                                    },
                                                    {
                                                        "path": "login",
                                                        "component": "LoginComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AuthModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/forget-password/forget-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgetPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/books/addbooks/addbooks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddbooksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/books/books/books.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/books/editbook/editbook.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditbookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_Book_ACTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_BOOKS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addbooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addBooksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_BOOK_ACTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_BOOK_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteBookSucces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_BOOK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_BOOK_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadBookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_BOOK_ACTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_BOOK_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateBookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BooksEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "booksReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_booksReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BOOK_STATE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBookById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBooksState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BooksState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/books/state/books.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/counter-buttons/counter-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CounterButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/counter-output/counter-output.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CounterOutputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/counter/counter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/custom-counter-input/custom-counter-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomCounterInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customIncrement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "decrement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "increment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onchangeChangeChannel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "counterReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_counterReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COUNTER_STATE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getChannel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCounter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCounterState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CounterState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/counter/state/counter.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dialog-module/dialog-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dialog-module/dialog-injector.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogInjector",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dialog-module/dialog-ref.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogRef",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dialog-module/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dialog-module/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/dialog-module/insertion.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InsertionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/register-user/register-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/state/newuser.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_USER_ACTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/state/newuser.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_USER_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/state/newuser.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/state/newuser.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addUserSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/state/newuser.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NewUserEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/state/newuser.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "UserReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/state/newuser.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_userReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/state/newuser.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/newuser/state/newuser.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/books.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BooksService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/register-user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegisterUserService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/aboutus/aboutus.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/models/books.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Books",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/models/register.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserRegister",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "buttonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "cardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "inputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}